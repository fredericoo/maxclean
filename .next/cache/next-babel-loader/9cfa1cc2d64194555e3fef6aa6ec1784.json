{"ast":null,"code":"var _jsxFileName = \"/Users/frederico/nextjs/maxclean/components/SlideInText/SlideInText.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRef, useEffect } from \"react\";\nimport gsap from \"gsap\";\nimport styles from \"./SlideInText.module.scss\";\n\nconst SlideInText = ({\n  text\n}) => {\n  const charsRef = useRef([]);\n  charsRef.current = new Array(text.split(\"\").length).map((ref, index) => usernameRefs.current[index] = React.createref());\n  useEffect(() => {\n    console.log(charsRef.current);\n    gsap.from(charsRef.current, {\n      yPercent: 120,\n      stagger: 0.2,\n      duration: 1,\n      ease: \"back\"\n    });\n  }, [charsRef]);\n  let refIndex = 0;\n  return __jsx(\"span\", {\n    \"aria-label\": text,\n    role: \"heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 3\n    }\n  }, text.split(\" \").map((word, wordIndex) => __jsx(\"span\", {\n    className: styles.word,\n    \"aria-hidden\": \"true\",\n    key: wordIndex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, word.split(\"\").map((char, index) => {\n    refIndex++;\n    return __jsx(\"span\", {\n      ref: charsRef.current[refIndex - 1],\n      key: index,\n      className: styles.char,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 8\n      }\n    }, char);\n  }))));\n};\n\nexport default SlideInText;","map":{"version":3,"sources":["/Users/frederico/nextjs/maxclean/components/SlideInText/SlideInText.js"],"names":["useRef","useEffect","gsap","styles","SlideInText","text","charsRef","current","Array","split","length","map","ref","index","usernameRefs","React","createref","console","log","from","yPercent","stagger","duration","ease","refIndex","word","wordIndex","char"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AACjC,QAAMC,QAAQ,GAAGN,MAAM,CAAC,EAAD,CAAvB;AACAM,EAAAA,QAAQ,CAACC,OAAT,GAAmB,IAAIC,KAAJ,CAAUH,IAAI,CAACI,KAAL,CAAW,EAAX,EAAeC,MAAzB,EAAiCC,GAAjC,CAClB,CAACC,GAAD,EAAMC,KAAN,KAAiBC,YAAY,CAACP,OAAb,CAAqBM,KAArB,IAA8BE,KAAK,CAACC,SAAN,EAD7B,CAAnB;AAIAf,EAAAA,SAAS,CAAC,MAAM;AACfgB,IAAAA,OAAO,CAACC,GAAR,CAAYZ,QAAQ,CAACC,OAArB;AACAL,IAAAA,IAAI,CAACiB,IAAL,CAAUb,QAAQ,CAACC,OAAnB,EAA4B;AAC3Ba,MAAAA,QAAQ,EAAE,GADiB;AAE3BC,MAAAA,OAAO,EAAE,GAFkB;AAG3BC,MAAAA,QAAQ,EAAE,CAHiB;AAI3BC,MAAAA,IAAI,EAAE;AAJqB,KAA5B;AAMA,GARQ,EAQN,CAACjB,QAAD,CARM,CAAT;AASA,MAAIkB,QAAQ,GAAG,CAAf;AACA,SACC;AAAM,kBAAYnB,IAAlB;AAAwB,IAAA,IAAI,EAAC,SAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEA,IAAI,CAACI,KAAL,CAAW,GAAX,EAAgBE,GAAhB,CAAoB,CAACc,IAAD,EAAOC,SAAP,KACpB;AAAM,IAAA,SAAS,EAAEvB,MAAM,CAACsB,IAAxB;AAA8B,mBAAY,MAA1C;AAAiD,IAAA,GAAG,EAAEC,SAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACED,IAAI,CAAChB,KAAL,CAAW,EAAX,EAAeE,GAAf,CAAmB,CAACgB,IAAD,EAAOd,KAAP,KAAiB;AACpCW,IAAAA,QAAQ;AACR,WACC;AACC,MAAA,GAAG,EAAElB,QAAQ,CAACC,OAAT,CAAiBiB,QAAQ,GAAG,CAA5B,CADN;AAEC,MAAA,GAAG,EAAEX,KAFN;AAGC,MAAA,SAAS,EAAEV,MAAM,CAACwB,IAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKEA,IALF,CADD;AASA,GAXA,CADF,CADA,CADF,CADD;AAoBA,CApCD;;AAsCA,eAAevB,WAAf","sourcesContent":["import { useRef, useEffect } from \"react\";\nimport gsap from \"gsap\";\nimport styles from \"./SlideInText.module.scss\";\n\nconst SlideInText = ({ text }) => {\n\tconst charsRef = useRef([]);\n\tcharsRef.current = new Array(text.split(\"\").length).map(\n\t\t(ref, index) => (usernameRefs.current[index] = React.createref())\n\t);\n\n\tuseEffect(() => {\n\t\tconsole.log(charsRef.current);\n\t\tgsap.from(charsRef.current, {\n\t\t\tyPercent: 120,\n\t\t\tstagger: 0.2,\n\t\t\tduration: 1,\n\t\t\tease: \"back\",\n\t\t});\n\t}, [charsRef]);\n\tlet refIndex = 0;\n\treturn (\n\t\t<span aria-label={text} role=\"heading\">\n\t\t\t{text.split(\" \").map((word, wordIndex) => (\n\t\t\t\t<span className={styles.word} aria-hidden=\"true\" key={wordIndex}>\n\t\t\t\t\t{word.split(\"\").map((char, index) => {\n\t\t\t\t\t\trefIndex++;\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tref={charsRef.current[refIndex - 1]}\n\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\tclassName={styles.char}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{char}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</span>\n\t\t\t))}\n\t\t</span>\n\t);\n};\n\nexport default SlideInText;\n"]},"metadata":{},"sourceType":"module"}