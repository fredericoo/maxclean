{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/frederico/nextjs/maxclean/components/SlideInText/SlideInText.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { createRef, useEffect, useState } from \"react\";\nimport gsap from \"gsap\";\nimport styles from \"./SlideInText.module.scss\";\n\nvar SlideInText = function SlideInText(_ref) {\n  _s();\n\n  var text = _ref.text;\n\n  var _useState = useState([]),\n      charsRef = _useState[0],\n      setCharsRef = _useState[1];\n\n  useEffect(function () {\n    setCharsRef(function (charsRef) {\n      return Array(text.split(\"\").length).fill().map(function (_, i) {\n        return charsRef[i] || /*#__PURE__*/createRef();\n      });\n    });\n  }, [text]);\n  useEffect(function () {\n    console.log(charsRef);\n    gsap.from(charsRef.current, {\n      yPercent: 120,\n      stagger: 0.2,\n      duration: 1,\n      ease: \"back\"\n    });\n  }, [charsRef]);\n  var refIndex = 0;\n  return __jsx(\"span\", {\n    \"aria-label\": text,\n    role: \"heading\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 3\n    }\n  }, text.split(\" \").map(function (word, wordIndex) {\n    return __jsx(\"span\", {\n      className: styles.word,\n      \"aria-hidden\": \"true\",\n      key: wordIndex,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 5\n      }\n    }, word.split(\"\").map(function (_char, index) {\n      refIndex++;\n      return __jsx(\"span\", {\n        ref: charsRef[refIndex - 1],\n        key: index,\n        className: styles[\"char\"],\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 8\n        }\n      }, _char);\n    }));\n  }));\n};\n\n_s(SlideInText, \"L5tOVojiOjRAwQqScn1TzMi5Wuc=\");\n\n_c = SlideInText;\nexport default SlideInText;\n\nvar _c;\n\n$RefreshReg$(_c, \"SlideInText\");","map":{"version":3,"sources":["/Users/frederico/nextjs/maxclean/components/SlideInText/SlideInText.js"],"names":["createRef","useEffect","useState","gsap","styles","SlideInText","text","charsRef","setCharsRef","Array","split","length","fill","map","_","i","console","log","from","current","yPercent","stagger","duration","ease","refIndex","word","wordIndex","char","index"],"mappings":";;;;;;AAAA,SAASA,SAAT,EAAoBC,SAApB,EAA+BC,QAA/B,QAA+C,OAA/C;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAc;AAAA;;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAAA,kBACDJ,QAAQ,CAAC,EAAD,CADP;AAAA,MAC1BK,QAD0B;AAAA,MAChBC,WADgB;;AAGjCP,EAAAA,SAAS,CAAC,YAAM;AACfO,IAAAA,WAAW,CAAC,UAACD,QAAD;AAAA,aACXE,KAAK,CAACH,IAAI,CAACI,KAAL,CAAW,EAAX,EAAeC,MAAhB,CAAL,CACEC,IADF,GAEEC,GAFF,CAEM,UAACC,CAAD,EAAIC,CAAJ;AAAA,eAAUR,QAAQ,CAACQ,CAAD,CAAR,iBAAef,SAAS,EAAlC;AAAA,OAFN,CADW;AAAA,KAAD,CAAX;AAKA,GANQ,EAMN,CAACM,IAAD,CANM,CAAT;AAQAL,EAAAA,SAAS,CAAC,YAAM;AACfe,IAAAA,OAAO,CAACC,GAAR,CAAYV,QAAZ;AACAJ,IAAAA,IAAI,CAACe,IAAL,CAAUX,QAAQ,CAACY,OAAnB,EAA4B;AAC3BC,MAAAA,QAAQ,EAAE,GADiB;AAE3BC,MAAAA,OAAO,EAAE,GAFkB;AAG3BC,MAAAA,QAAQ,EAAE,CAHiB;AAI3BC,MAAAA,IAAI,EAAE;AAJqB,KAA5B;AAMA,GARQ,EAQN,CAAChB,QAAD,CARM,CAAT;AAUA,MAAIiB,QAAQ,GAAG,CAAf;AACA,SACC;AAAM,kBAAYlB,IAAlB;AAAwB,IAAA,IAAI,EAAC,SAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEA,IAAI,CAACI,KAAL,CAAW,GAAX,EAAgBG,GAAhB,CAAoB,UAACY,IAAD,EAAOC,SAAP;AAAA,WACpB;AAAM,MAAA,SAAS,EAAEtB,MAAM,CAACqB,IAAxB;AAA8B,qBAAY,MAA1C;AAAiD,MAAA,GAAG,EAAEC,SAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACED,IAAI,CAACf,KAAL,CAAW,EAAX,EAAeG,GAAf,CAAmB,UAACc,KAAD,EAAOC,KAAP,EAAiB;AACpCJ,MAAAA,QAAQ;AACR,aACC;AACC,QAAA,GAAG,EAAEjB,QAAQ,CAACiB,QAAQ,GAAG,CAAZ,CADd;AAEC,QAAA,GAAG,EAAEI,KAFN;AAGC,QAAA,SAAS,EAAExB,MAAM,QAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKEuB,KALF,CADD;AASA,KAXA,CADF,CADoB;AAAA,GAApB,CADF,CADD;AAoBA,CA1CD;;GAAMtB,W;;KAAAA,W;AA4CN,eAAeA,WAAf","sourcesContent":["import { createRef, useEffect, useState } from \"react\";\nimport gsap from \"gsap\";\nimport styles from \"./SlideInText.module.scss\";\n\nconst SlideInText = ({ text }) => {\n\tconst [charsRef, setCharsRef] = useState([]);\n\n\tuseEffect(() => {\n\t\tsetCharsRef((charsRef) =>\n\t\t\tArray(text.split(\"\").length)\n\t\t\t\t.fill()\n\t\t\t\t.map((_, i) => charsRef[i] || createRef())\n\t\t);\n\t}, [text]);\n\n\tuseEffect(() => {\n\t\tconsole.log(charsRef);\n\t\tgsap.from(charsRef.current, {\n\t\t\tyPercent: 120,\n\t\t\tstagger: 0.2,\n\t\t\tduration: 1,\n\t\t\tease: \"back\",\n\t\t});\n\t}, [charsRef]);\n\n\tlet refIndex = 0;\n\treturn (\n\t\t<span aria-label={text} role=\"heading\">\n\t\t\t{text.split(\" \").map((word, wordIndex) => (\n\t\t\t\t<span className={styles.word} aria-hidden=\"true\" key={wordIndex}>\n\t\t\t\t\t{word.split(\"\").map((char, index) => {\n\t\t\t\t\t\trefIndex++;\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tref={charsRef[refIndex - 1]}\n\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\tclassName={styles.char}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{char}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</span>\n\t\t\t))}\n\t\t</span>\n\t);\n};\n\nexport default SlideInText;\n"]},"metadata":{},"sourceType":"module"}