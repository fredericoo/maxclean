{"ast":null,"code":"var _jsxFileName = \"/Users/frederico/nextjs/maxclean/components/SlideInText/SlideInText.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { createRef, useEffect, useState } from \"react\";\nimport gsap from \"gsap\";\nimport styles from \"./SlideInText.module.scss\";\nimport useIsInViewport from \"use-is-in-viewport\";\n\nconst SlideInText = ({\n  text\n}) => {\n  const {\n    0: charsRef,\n    1: setCharsRef\n  } = useState([]);\n  const [isInViewport, targetRef] = useIsInViewport();\n  useEffect(() => {\n    setCharsRef(charsRef => Array(text.split(\"\").length).fill().map((_, i) => charsRef[i] || /*#__PURE__*/createRef()));\n  }, [text]);\n  useEffect(() => {\n    const settings = {\n      yPercent: 120,\n      stagger: 0.05,\n      duration: 1,\n      ease: \"power3.out\"\n    };\n    isInViewport ? gsap.from(charsRef.map(char => char.current), settings) : gsap.to(charsRef.map(char => char.current), settings);\n  }, [charsRef, isInViewport]);\n  let refIndex = 0;\n  return __jsx(\"span\", {\n    ref: targetRef,\n    \"aria-label\": text,\n    role: \"heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 3\n    }\n  }, text.split(\" \").map((word, wordIndex) => __jsx(\"span\", {\n    className: styles.word,\n    \"aria-hidden\": \"true\",\n    key: wordIndex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, word.split(\"\").map((char, index) => {\n    refIndex++;\n    return __jsx(\"span\", {\n      ref: charsRef[refIndex - 1],\n      key: index,\n      className: styles.char,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 8\n      }\n    }, char);\n  }))));\n};\n\nexport default SlideInText;","map":{"version":3,"sources":["/Users/frederico/nextjs/maxclean/components/SlideInText/SlideInText.js"],"names":["createRef","useEffect","useState","gsap","styles","useIsInViewport","SlideInText","text","charsRef","setCharsRef","isInViewport","targetRef","Array","split","length","fill","map","_","i","settings","yPercent","stagger","duration","ease","from","char","current","to","refIndex","word","wordIndex","index"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,SAApB,EAA+BC,QAA/B,QAA+C,OAA/C;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAOC,eAAP,MAA4B,oBAA5B;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AACjC,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0BP,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACQ,YAAD,EAAeC,SAAf,IAA4BN,eAAe,EAAjD;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACfQ,IAAAA,WAAW,CAAED,QAAD,IACXI,KAAK,CAACL,IAAI,CAACM,KAAL,CAAW,EAAX,EAAeC,MAAhB,CAAL,CACEC,IADF,GAEEC,GAFF,CAEM,CAACC,CAAD,EAAIC,CAAJ,KAAUV,QAAQ,CAACU,CAAD,CAAR,iBAAelB,SAAS,EAFxC,CADU,CAAX;AAKA,GANQ,EAMN,CAACO,IAAD,CANM,CAAT;AAQAN,EAAAA,SAAS,CAAC,MAAM;AACf,UAAMkB,QAAQ,GAAG;AAChBC,MAAAA,QAAQ,EAAE,GADM;AAEhBC,MAAAA,OAAO,EAAE,IAFO;AAGhBC,MAAAA,QAAQ,EAAE,CAHM;AAIhBC,MAAAA,IAAI,EAAE;AAJU,KAAjB;AAMAb,IAAAA,YAAY,GACTP,IAAI,CAACqB,IAAL,CACAhB,QAAQ,CAACQ,GAAT,CAAcS,IAAD,IAAUA,IAAI,CAACC,OAA5B,CADA,EAEAP,QAFA,CADS,GAKThB,IAAI,CAACwB,EAAL,CACAnB,QAAQ,CAACQ,GAAT,CAAcS,IAAD,IAAUA,IAAI,CAACC,OAA5B,CADA,EAEAP,QAFA,CALH;AASA,GAhBQ,EAgBN,CAACX,QAAD,EAAWE,YAAX,CAhBM,CAAT;AAkBA,MAAIkB,QAAQ,GAAG,CAAf;AACA,SACC;AAAM,IAAA,GAAG,EAAEjB,SAAX;AAAsB,kBAAYJ,IAAlC;AAAwC,IAAA,IAAI,EAAC,SAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEA,IAAI,CAACM,KAAL,CAAW,GAAX,EAAgBG,GAAhB,CAAoB,CAACa,IAAD,EAAOC,SAAP,KACpB;AAAM,IAAA,SAAS,EAAE1B,MAAM,CAACyB,IAAxB;AAA8B,mBAAY,MAA1C;AAAiD,IAAA,GAAG,EAAEC,SAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACED,IAAI,CAAChB,KAAL,CAAW,EAAX,EAAeG,GAAf,CAAmB,CAACS,IAAD,EAAOM,KAAP,KAAiB;AACpCH,IAAAA,QAAQ;AACR,WACC;AACC,MAAA,GAAG,EAAEpB,QAAQ,CAACoB,QAAQ,GAAG,CAAZ,CADd;AAEC,MAAA,GAAG,EAAEG,KAFN;AAGC,MAAA,SAAS,EAAE3B,MAAM,CAACqB,IAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKEA,IALF,CADD;AASA,GAXA,CADF,CADA,CADF,CADD;AAoBA,CAnDD;;AAqDA,eAAenB,WAAf","sourcesContent":["import { createRef, useEffect, useState } from \"react\";\nimport gsap from \"gsap\";\nimport styles from \"./SlideInText.module.scss\";\nimport useIsInViewport from \"use-is-in-viewport\";\n\nconst SlideInText = ({ text }) => {\n\tconst [charsRef, setCharsRef] = useState([]);\n\tconst [isInViewport, targetRef] = useIsInViewport();\n\n\tuseEffect(() => {\n\t\tsetCharsRef((charsRef) =>\n\t\t\tArray(text.split(\"\").length)\n\t\t\t\t.fill()\n\t\t\t\t.map((_, i) => charsRef[i] || createRef())\n\t\t);\n\t}, [text]);\n\n\tuseEffect(() => {\n\t\tconst settings = {\n\t\t\tyPercent: 120,\n\t\t\tstagger: 0.05,\n\t\t\tduration: 1,\n\t\t\tease: \"power3.out\",\n\t\t};\n\t\tisInViewport\n\t\t\t? gsap.from(\n\t\t\t\t\tcharsRef.map((char) => char.current),\n\t\t\t\t\tsettings\n\t\t\t  )\n\t\t\t: gsap.to(\n\t\t\t\t\tcharsRef.map((char) => char.current),\n\t\t\t\t\tsettings\n\t\t\t  );\n\t}, [charsRef, isInViewport]);\n\n\tlet refIndex = 0;\n\treturn (\n\t\t<span ref={targetRef} aria-label={text} role=\"heading\">\n\t\t\t{text.split(\" \").map((word, wordIndex) => (\n\t\t\t\t<span className={styles.word} aria-hidden=\"true\" key={wordIndex}>\n\t\t\t\t\t{word.split(\"\").map((char, index) => {\n\t\t\t\t\t\trefIndex++;\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tref={charsRef[refIndex - 1]}\n\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\tclassName={styles.char}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{char}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</span>\n\t\t\t))}\n\t\t</span>\n\t);\n};\n\nexport default SlideInText;\n"]},"metadata":{},"sourceType":"module"}