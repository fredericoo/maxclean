{"ast":null,"code":"var _jsxFileName = \"/Users/frederico/Documents/maxclean/pages/[uid].js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { queryRepeatableDocuments } from 'utils/queries';\nimport { Client, manageLocal } from 'utils/prismicHelpers';\nimport { pageToolbarDocs } from 'utils/prismicToolbarQueries';\nimport useUpdatePreviewRef from 'utils/hooks/useUpdatePreviewRef';\nimport useUpdateToolbarDocs from 'utils/hooks/useUpdateToolbarDocs';\nimport { Layout, SliceZone } from 'components';\n/**\n * posts component\n */\n\nconst Page = ({\n  doc,\n  menu,\n  lang,\n  preview\n}) => {\n  if (doc && doc.data) {\n    useUpdatePreviewRef(preview, doc.id);\n    useUpdateToolbarDocs(pageToolbarDocs(doc.uid, preview.activeRef, doc.lang), [doc]);\n    return __jsx(Layout, {\n      altLangs: doc.alternate_languages,\n      lang: lang,\n      menu: menu,\n      isPreview: preview.isActive,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 7\n      }\n    }, __jsx(SliceZone, {\n      sliceZone: doc.data.body,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }\n    }));\n  }\n};\n\nexport async function getStaticProps({\n  preview,\n  previewData,\n  params,\n  locale,\n  locales\n}) {\n  const ref = previewData ? previewData.ref : null;\n  const isPreview = preview || false;\n  const client = Client();\n  const doc = (await client.getByUID('page', params.uid, ref ? {\n    ref,\n    lang: locale\n  } : {\n    lang: locale\n  })) || {};\n  const menu = (await client.getSingle('top_menu', ref ? {\n    ref,\n    lang: locale\n  } : {\n    lang: locale\n  })) || {};\n  const {\n    currentLang,\n    isMyMainLanguage\n  } = manageLocal(locales, locale);\n  return {\n    props: {\n      menu,\n      doc,\n      preview: {\n        isActive: isPreview,\n        activeRef: ref\n      },\n      lang: {\n        currentLang,\n        isMyMainLanguage\n      }\n    }\n  };\n}\nexport async function getStaticPaths() {\n  const documents = await queryRepeatableDocuments(doc => doc.type === 'page');\n  return {\n    paths: documents.map(doc => {\n      return {\n        params: {\n          uid: doc.uid\n        },\n        locale: doc.lang\n      };\n    }),\n    fallback: false\n  };\n}\nexport default Page;","map":{"version":3,"sources":["/Users/frederico/Documents/maxclean/pages/[uid].js"],"names":["React","queryRepeatableDocuments","Client","manageLocal","pageToolbarDocs","useUpdatePreviewRef","useUpdateToolbarDocs","Layout","SliceZone","Page","doc","menu","lang","preview","data","id","uid","activeRef","alternate_languages","isActive","body","getStaticProps","previewData","params","locale","locales","ref","isPreview","client","getByUID","getSingle","currentLang","isMyMainLanguage","props","getStaticPaths","documents","type","paths","map","fallback"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { queryRepeatableDocuments } from 'utils/queries';\nimport { Client, manageLocal } from 'utils/prismicHelpers';\nimport { pageToolbarDocs } from 'utils/prismicToolbarQueries'\nimport useUpdatePreviewRef from 'utils/hooks/useUpdatePreviewRef';\nimport useUpdateToolbarDocs from 'utils/hooks/useUpdateToolbarDocs';\nimport { Layout, SliceZone } from 'components';\n\n/**\n * posts component\n */\nconst Page = ({ doc, menu, lang, preview }) => {\n\n  if (doc && doc.data) {\n\n    useUpdatePreviewRef(preview, doc.id)\n    useUpdateToolbarDocs(pageToolbarDocs(doc.uid, preview.activeRef, doc.lang), [doc])\n   \n    return (\n      <Layout\n        altLangs={doc.alternate_languages}\n        lang={lang}\n        menu={menu}\n        isPreview={preview.isActive}\n      >\n        <SliceZone sliceZone={doc.data.body} />\n      </Layout>\n    );\n  }\n};\n\nexport async function getStaticProps({\n  preview, \n  previewData,\n  params,\n  locale,\n  locales,\n}) {\n  const ref = previewData ? previewData.ref : null\n  const isPreview = preview || false\n  const client = Client();\n  const doc =\n    (await client.getByUID(\n      'page',\n      params.uid,\n      ref ? { ref, lang: locale } : { lang: locale }\n    )) || {};\n  const menu =\n    (await client.getSingle('top_menu', ref ? { ref, lang: locale } : { lang: locale })) ||\n    {};\n\n  const { currentLang, isMyMainLanguage } = manageLocal(locales, locale)\n\n  return {\n    props: {\n      menu,\n      doc,\n      preview: {\n        isActive: isPreview,\n        activeRef: ref,\n      },\n      lang:{\n        currentLang,\n        isMyMainLanguage,\n      }\n    },\n  };\n}\n\nexport async function getStaticPaths() {\n  const documents = await queryRepeatableDocuments(\n    (doc) => doc.type === 'page'\n  );\n  return {\n    paths: documents.map((doc) => {\n      return { params: { uid: doc.uid }, locale: doc.lang };\n    }),\n    fallback: false,\n  };\n}\n\nexport default Page;\n"]},"metadata":{},"sourceType":"module"}