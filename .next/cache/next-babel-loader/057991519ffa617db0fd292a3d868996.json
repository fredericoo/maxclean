{"ast":null,"code":"var _jsxFileName = \"/Users/frederico/nextjs/maxclean/components/AnimateText/AnimateText.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createRef, useEffect, useState, useRef } from \"react\";\nimport gsap from \"gsap\";\nimport { ScrollTrigger } from \"gsap/dist/ScrollTrigger\";\nimport styles from \"./AnimateText.module.scss\";\n\nconst SlideInText = ({\n  text,\n  once,\n  propsFrom,\n  propsTo\n}) => {\n  gsap.registerPlugin(ScrollTrigger);\n  const {\n    0: charsRef,\n    1: setCharsRef\n  } = useState([]);\n  const triggerRef = useRef();\n  useEffect(() => {\n    setCharsRef(charsRef => Array(text.split(\"\").length).fill().map((_, i) => charsRef[i] || /*#__PURE__*/createRef()));\n  }, [text]);\n  useEffect(() => {\n    gsap.fromTo(charsRef.map(char => char.current), propsFrom, _objectSpread({\n      stagger: 0.05,\n      duration: 1,\n      ease: \"power3.out\",\n      scrollTrigger: {\n        trigger: triggerRef.current,\n        start: \"top bottom-=10%\",\n        end: \"bottom top+=10%\" // markers: true,\n\n      }\n    }, propsTo));\n  }, [charsRef]);\n  let refIndex = 0;\n  return __jsx(\"span\", {\n    ref: triggerRef,\n    \"aria-label\": text,\n    role: \"heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 3\n    }\n  }, text.split(\" \").map((word, wordIndex) => __jsx(\"span\", {\n    className: styles.word,\n    \"aria-hidden\": \"true\",\n    key: wordIndex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, word.split(\"\").map((char, index) => {\n    refIndex++;\n    return __jsx(\"span\", {\n      ref: charsRef[refIndex - 1],\n      key: index,\n      className: styles.char,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 8\n      }\n    }, char);\n  }))));\n};\n\nexport default SlideInText;","map":{"version":3,"sources":["/Users/frederico/nextjs/maxclean/components/AnimateText/AnimateText.js"],"names":["createRef","useEffect","useState","useRef","gsap","ScrollTrigger","styles","SlideInText","text","once","propsFrom","propsTo","registerPlugin","charsRef","setCharsRef","triggerRef","Array","split","length","fill","map","_","i","fromTo","char","current","stagger","duration","ease","scrollTrigger","trigger","start","end","refIndex","word","wordIndex","index"],"mappings":";;;;;;;;;;AAAA,SAASA,SAAT,EAAoBC,SAApB,EAA+BC,QAA/B,EAAyCC,MAAzC,QAAuD,OAAvD;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,aAAT,QAA8B,yBAA9B;AACA,OAAOC,MAAP,MAAmB,2BAAnB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,IAAR;AAAcC,EAAAA,SAAd;AAAyBC,EAAAA;AAAzB,CAAD,KAAwC;AAC3DP,EAAAA,IAAI,CAACQ,cAAL,CAAoBP,aAApB;AAEA,QAAM;AAAA,OAACQ,QAAD;AAAA,OAAWC;AAAX,MAA0BZ,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAMa,UAAU,GAAGZ,MAAM,EAAzB;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACfa,IAAAA,WAAW,CAAED,QAAD,IACXG,KAAK,CAACR,IAAI,CAACS,KAAL,CAAW,EAAX,EAAeC,MAAhB,CAAL,CACEC,IADF,GAEEC,GAFF,CAEM,CAACC,CAAD,EAAIC,CAAJ,KAAUT,QAAQ,CAACS,CAAD,CAAR,iBAAetB,SAAS,EAFxC,CADU,CAAX;AAKA,GANQ,EAMN,CAACQ,IAAD,CANM,CAAT;AAQAP,EAAAA,SAAS,CAAC,MAAM;AACfG,IAAAA,IAAI,CAACmB,MAAL,CACCV,QAAQ,CAACO,GAAT,CAAcI,IAAD,IAAUA,IAAI,CAACC,OAA5B,CADD,EAECf,SAFD;AAIEgB,MAAAA,OAAO,EAAE,IAJX;AAKEC,MAAAA,QAAQ,EAAE,CALZ;AAMEC,MAAAA,IAAI,EAAE,YANR;AAOEC,MAAAA,aAAa,EAAE;AACdC,QAAAA,OAAO,EAAEf,UAAU,CAACU,OADN;AAEdM,QAAAA,KAAK,EAAE,iBAFO;AAGdC,QAAAA,GAAG,EAAE,iBAHS,CAId;;AAJc;AAPjB,OAaKrB,OAbL;AAgBA,GAjBQ,EAiBN,CAACE,QAAD,CAjBM,CAAT;AAmBA,MAAIoB,QAAQ,GAAG,CAAf;AACA,SACC;AAAM,IAAA,GAAG,EAAElB,UAAX;AAAuB,kBAAYP,IAAnC;AAAyC,IAAA,IAAI,EAAC,SAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEA,IAAI,CAACS,KAAL,CAAW,GAAX,EAAgBG,GAAhB,CAAoB,CAACc,IAAD,EAAOC,SAAP,KACpB;AAAM,IAAA,SAAS,EAAE7B,MAAM,CAAC4B,IAAxB;AAA8B,mBAAY,MAA1C;AAAiD,IAAA,GAAG,EAAEC,SAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACED,IAAI,CAACjB,KAAL,CAAW,EAAX,EAAeG,GAAf,CAAmB,CAACI,IAAD,EAAOY,KAAP,KAAiB;AACpCH,IAAAA,QAAQ;AACR,WACC;AACC,MAAA,GAAG,EAAEpB,QAAQ,CAACoB,QAAQ,GAAG,CAAZ,CADd;AAEC,MAAA,GAAG,EAAEG,KAFN;AAGC,MAAA,SAAS,EAAE9B,MAAM,CAACkB,IAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKEA,IALF,CADD;AASA,GAXA,CADF,CADA,CADF,CADD;AAoBA,CAtDD;;AAwDA,eAAejB,WAAf","sourcesContent":["import { createRef, useEffect, useState, useRef } from \"react\";\nimport gsap from \"gsap\";\nimport { ScrollTrigger } from \"gsap/dist/ScrollTrigger\";\nimport styles from \"./AnimateText.module.scss\";\n\nconst SlideInText = ({ text, once, propsFrom, propsTo }) => {\n\tgsap.registerPlugin(ScrollTrigger);\n\n\tconst [charsRef, setCharsRef] = useState([]);\n\tconst triggerRef = useRef();\n\n\tuseEffect(() => {\n\t\tsetCharsRef((charsRef) =>\n\t\t\tArray(text.split(\"\").length)\n\t\t\t\t.fill()\n\t\t\t\t.map((_, i) => charsRef[i] || createRef())\n\t\t);\n\t}, [text]);\n\n\tuseEffect(() => {\n\t\tgsap.fromTo(\n\t\t\tcharsRef.map((char) => char.current),\n\t\t\tpropsFrom,\n\t\t\t{\n\t\t\t\tstagger: 0.05,\n\t\t\t\tduration: 1,\n\t\t\t\tease: \"power3.out\",\n\t\t\t\tscrollTrigger: {\n\t\t\t\t\ttrigger: triggerRef.current,\n\t\t\t\t\tstart: \"top bottom-=10%\",\n\t\t\t\t\tend: \"bottom top+=10%\",\n\t\t\t\t\t// markers: true,\n\t\t\t\t},\n\t\t\t\t...propsTo,\n\t\t\t}\n\t\t);\n\t}, [charsRef]);\n\n\tlet refIndex = 0;\n\treturn (\n\t\t<span ref={triggerRef} aria-label={text} role=\"heading\">\n\t\t\t{text.split(\" \").map((word, wordIndex) => (\n\t\t\t\t<span className={styles.word} aria-hidden=\"true\" key={wordIndex}>\n\t\t\t\t\t{word.split(\"\").map((char, index) => {\n\t\t\t\t\t\trefIndex++;\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tref={charsRef[refIndex - 1]}\n\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\tclassName={styles.char}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{char}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</span>\n\t\t\t))}\n\t\t</span>\n\t);\n};\n\nexport default SlideInText;\n"]},"metadata":{},"sourceType":"module"}