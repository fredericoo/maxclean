{"ast":null,"code":"var _jsxFileName = \"/Users/frederico/nextjs/maxclean/pages/[uid].js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { queryRepeatableDocuments } from \"utils/queries\";\nimport { Client, manageLocal } from \"utils/prismicHelpers\";\nimport { pageToolbarDocs } from \"utils/prismicToolbarQueries\";\nimport useUpdatePreviewRef from \"utils/hooks/useUpdatePreviewRef\";\nimport useUpdateToolbarDocs from \"utils/hooks/useUpdateToolbarDocs\";\nimport { Layout, SliceZone } from \"components\";\n/**\n * posts component\n */\n\nconst Page = ({\n  doc,\n  menu,\n  lang,\n  preview\n}) => {\n  if (doc && doc.data) {\n    useUpdatePreviewRef(preview, doc.id);\n    useUpdateToolbarDocs(pageToolbarDocs(doc.uid, preview.activeRef, doc.lang), [doc]);\n    return __jsx(Layout, {\n      altLangs: doc.alternate_languages,\n      lang: lang,\n      menu: menu,\n      isPreview: preview.isActive,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 4\n      }\n    }, __jsx(SliceZone, {\n      sliceZone: doc.data.body,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 5\n      }\n    }));\n  }\n};\n\nexport async function getStaticProps({\n  preview,\n  previewData,\n  params,\n  locale,\n  locales\n}) {\n  const ref = previewData ? previewData.ref : null;\n  const isPreview = preview || false;\n  const client = Client();\n  const doc = (await client.getByUID(\"page\", params.uid, ref ? {\n    ref,\n    lang: locale\n  } : {\n    lang: locale\n  })) || {};\n  const menu = (await client.getSingle(\"top_menu\", ref ? {\n    ref,\n    lang: locale\n  } : {\n    lang: locale\n  })) || {};\n  const {\n    currentLang,\n    isMyMainLanguage\n  } = manageLocal(locales, locale);\n  return {\n    props: {\n      menu,\n      doc,\n      preview: {\n        isActive: isPreview,\n        activeRef: ref\n      },\n      lang: {\n        currentLang,\n        isMyMainLanguage\n      }\n    }\n  };\n}\nexport async function getStaticPaths() {\n  const documents = await queryRepeatableDocuments(doc => doc.type === \"page\");\n  return {\n    paths: documents.map(doc => {\n      return {\n        params: {\n          uid: doc.uid\n        },\n        locale: doc.lang\n      };\n    }),\n    fallback: false\n  };\n}\nexport default Page;","map":{"version":3,"sources":["/Users/frederico/nextjs/maxclean/pages/[uid].js"],"names":["React","queryRepeatableDocuments","Client","manageLocal","pageToolbarDocs","useUpdatePreviewRef","useUpdateToolbarDocs","Layout","SliceZone","Page","doc","menu","lang","preview","data","id","uid","activeRef","alternate_languages","isActive","body","getStaticProps","previewData","params","locale","locales","ref","isPreview","client","getByUID","getSingle","currentLang","isMyMainLanguage","props","getStaticPaths","documents","type","paths","map","fallback"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { queryRepeatableDocuments } from \"utils/queries\";\nimport { Client, manageLocal } from \"utils/prismicHelpers\";\nimport { pageToolbarDocs } from \"utils/prismicToolbarQueries\";\nimport useUpdatePreviewRef from \"utils/hooks/useUpdatePreviewRef\";\nimport useUpdateToolbarDocs from \"utils/hooks/useUpdateToolbarDocs\";\nimport { Layout, SliceZone } from \"components\";\n\n/**\n * posts component\n */\nconst Page = ({ doc, menu, lang, preview }) => {\n\tif (doc && doc.data) {\n\t\tuseUpdatePreviewRef(preview, doc.id);\n\t\tuseUpdateToolbarDocs(\n\t\t\tpageToolbarDocs(doc.uid, preview.activeRef, doc.lang),\n\t\t\t[doc]\n\t\t);\n\n\t\treturn (\n\t\t\t<Layout\n\t\t\t\taltLangs={doc.alternate_languages}\n\t\t\t\tlang={lang}\n\t\t\t\tmenu={menu}\n\t\t\t\tisPreview={preview.isActive}\n\t\t\t>\n\t\t\t\t<SliceZone sliceZone={doc.data.body} />\n\t\t\t</Layout>\n\t\t);\n\t}\n};\n\nexport async function getStaticProps({\n\tpreview,\n\tpreviewData,\n\tparams,\n\tlocale,\n\tlocales,\n}) {\n\tconst ref = previewData ? previewData.ref : null;\n\tconst isPreview = preview || false;\n\tconst client = Client();\n\tconst doc =\n\t\t(await client.getByUID(\n\t\t\t\"page\",\n\t\t\tparams.uid,\n\t\t\tref ? { ref, lang: locale } : { lang: locale }\n\t\t)) || {};\n\tconst menu =\n\t\t(await client.getSingle(\n\t\t\t\"top_menu\",\n\t\t\tref ? { ref, lang: locale } : { lang: locale }\n\t\t)) || {};\n\n\tconst { currentLang, isMyMainLanguage } = manageLocal(locales, locale);\n\n\treturn {\n\t\tprops: {\n\t\t\tmenu,\n\t\t\tdoc,\n\t\t\tpreview: {\n\t\t\t\tisActive: isPreview,\n\t\t\t\tactiveRef: ref,\n\t\t\t},\n\t\t\tlang: {\n\t\t\t\tcurrentLang,\n\t\t\t\tisMyMainLanguage,\n\t\t\t},\n\t\t},\n\t};\n}\n\nexport async function getStaticPaths() {\n\tconst documents = await queryRepeatableDocuments(\n\t\t(doc) => doc.type === \"page\"\n\t);\n\treturn {\n\t\tpaths: documents.map((doc) => {\n\t\t\treturn { params: { uid: doc.uid }, locale: doc.lang };\n\t\t}),\n\t\tfallback: false,\n\t};\n}\n\nexport default Page;\n"]},"metadata":{},"sourceType":"module"}