{"ast":null,"code":"var _jsxFileName = \"/Users/frederico/nextjs/maxclean/components/SlideInText/SlideInText.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRef, useEffect, useState } from \"react\";\nimport gsap from \"gsap\";\nimport styles from \"./SlideInText.module.scss\";\n\nconst SlideInText = ({\n  text\n}) => {\n  const {\n    0: charsRef,\n    1: setCharsRef\n  } = useState([]);\n  useEffect(() => {\n    setCharsRef(charsRef => Array(text.split(\"\").length).fill().map((_, i) => charsRef[i] || createRef()));\n  }, [text]);\n  useEffect(() => {\n    gsap.from(charsRef.current, {\n      yPercent: 120,\n      stagger: 0.2,\n      duration: 1,\n      ease: \"back\"\n    });\n  }, [charsRef]);\n  let refIndex = 0;\n  return __jsx(\"span\", {\n    \"aria-label\": text,\n    role: \"heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 3\n    }\n  }, text.split(\" \").map((word, wordIndex) => __jsx(\"span\", {\n    className: styles.word,\n    \"aria-hidden\": \"true\",\n    key: wordIndex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, word.split(\"\").map((char, index) => {\n    refIndex++;\n    return __jsx(\"span\", {\n      ref: charsRef[refIndex - 1],\n      key: index,\n      className: styles.char,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 8\n      }\n    }, char);\n  }))));\n};\n\nexport default SlideInText;","map":{"version":3,"sources":["/Users/frederico/nextjs/maxclean/components/SlideInText/SlideInText.js"],"names":["useRef","useEffect","useState","gsap","styles","SlideInText","text","charsRef","setCharsRef","Array","split","length","fill","map","_","i","createRef","from","current","yPercent","stagger","duration","ease","refIndex","word","wordIndex","char","index"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,SAAjB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AACjC,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0BN,QAAQ,CAAC,EAAD,CAAxC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACfO,IAAAA,WAAW,CAAED,QAAD,IACXE,KAAK,CAACH,IAAI,CAACI,KAAL,CAAW,EAAX,EAAeC,MAAhB,CAAL,CACEC,IADF,GAEEC,GAFF,CAEM,CAACC,CAAD,EAAIC,CAAJ,KAAUR,QAAQ,CAACQ,CAAD,CAAR,IAAeC,SAAS,EAFxC,CADU,CAAX;AAKA,GANQ,EAMN,CAACV,IAAD,CANM,CAAT;AAQAL,EAAAA,SAAS,CAAC,MAAM;AACfE,IAAAA,IAAI,CAACc,IAAL,CAAUV,QAAQ,CAACW,OAAnB,EAA4B;AAC3BC,MAAAA,QAAQ,EAAE,GADiB;AAE3BC,MAAAA,OAAO,EAAE,GAFkB;AAG3BC,MAAAA,QAAQ,EAAE,CAHiB;AAI3BC,MAAAA,IAAI,EAAE;AAJqB,KAA5B;AAMA,GAPQ,EAON,CAACf,QAAD,CAPM,CAAT;AASA,MAAIgB,QAAQ,GAAG,CAAf;AACA,SACC;AAAM,kBAAYjB,IAAlB;AAAwB,IAAA,IAAI,EAAC,SAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEA,IAAI,CAACI,KAAL,CAAW,GAAX,EAAgBG,GAAhB,CAAoB,CAACW,IAAD,EAAOC,SAAP,KACpB;AAAM,IAAA,SAAS,EAAErB,MAAM,CAACoB,IAAxB;AAA8B,mBAAY,MAA1C;AAAiD,IAAA,GAAG,EAAEC,SAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACED,IAAI,CAACd,KAAL,CAAW,EAAX,EAAeG,GAAf,CAAmB,CAACa,IAAD,EAAOC,KAAP,KAAiB;AACpCJ,IAAAA,QAAQ;AACR,WACC;AACC,MAAA,GAAG,EAAEhB,QAAQ,CAACgB,QAAQ,GAAG,CAAZ,CADd;AAEC,MAAA,GAAG,EAAEI,KAFN;AAGC,MAAA,SAAS,EAAEvB,MAAM,CAACsB,IAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKEA,IALF,CADD;AASA,GAXA,CADF,CADA,CADF,CADD;AAoBA,CAzCD;;AA2CA,eAAerB,WAAf","sourcesContent":["import { useRef, useEffect, useState } from \"react\";\nimport gsap from \"gsap\";\nimport styles from \"./SlideInText.module.scss\";\n\nconst SlideInText = ({ text }) => {\n\tconst [charsRef, setCharsRef] = useState([]);\n\n\tuseEffect(() => {\n\t\tsetCharsRef((charsRef) =>\n\t\t\tArray(text.split(\"\").length)\n\t\t\t\t.fill()\n\t\t\t\t.map((_, i) => charsRef[i] || createRef())\n\t\t);\n\t}, [text]);\n\n\tuseEffect(() => {\n\t\tgsap.from(charsRef.current, {\n\t\t\tyPercent: 120,\n\t\t\tstagger: 0.2,\n\t\t\tduration: 1,\n\t\t\tease: \"back\",\n\t\t});\n\t}, [charsRef]);\n\n\tlet refIndex = 0;\n\treturn (\n\t\t<span aria-label={text} role=\"heading\">\n\t\t\t{text.split(\" \").map((word, wordIndex) => (\n\t\t\t\t<span className={styles.word} aria-hidden=\"true\" key={wordIndex}>\n\t\t\t\t\t{word.split(\"\").map((char, index) => {\n\t\t\t\t\t\trefIndex++;\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tref={charsRef[refIndex - 1]}\n\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\tclassName={styles.char}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{char}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</span>\n\t\t\t))}\n\t\t</span>\n\t);\n};\n\nexport default SlideInText;\n"]},"metadata":{},"sourceType":"module"}