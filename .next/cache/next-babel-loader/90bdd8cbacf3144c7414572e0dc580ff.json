{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/frederico/Documents/maxclean/pages/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { homepageToolbarDocs } from 'utils/prismicToolbarQueries';\nimport useUpdatePreviewRef from 'utils/hooks/useUpdatePreviewRef';\nimport useUpdateToolbarDocs from 'utils/hooks/useUpdateToolbarDocs';\nimport { Layout, SliceZone } from 'components';\n/**\n * Homepage component\n */\n\nvar Homepage = function Homepage(_ref) {\n  _s();\n\n  var doc = _ref.doc,\n      menu = _ref.menu,\n      lang = _ref.lang,\n      preview = _ref.preview;\n\n  if (doc && doc.data) {\n    useUpdatePreviewRef(preview, doc.id);\n    useUpdateToolbarDocs(homepageToolbarDocs(preview.activeRef, doc.lang), [doc]);\n    return __jsx(Layout, {\n      altLangs: doc.alternate_languages,\n      lang: lang,\n      menu: menu,\n      isPreview: preview.isActive,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 7\n      }\n    }, __jsx(SliceZone, {\n      sliceZone: doc.data.body,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }\n    }));\n  }\n};\n\n_s(Homepage, \"WVAZUbuukr7PwlfasY2BCDrp+uQ=\", false, function () {\n  return [useUpdatePreviewRef, useUpdateToolbarDocs];\n});\n\n_c = Homepage;\nexport var __N_SSG = true;\nexport default Homepage;\n\nvar _c;\n\n$RefreshReg$(_c, \"Homepage\");","map":{"version":3,"sources":["/Users/frederico/Documents/maxclean/pages/index.js"],"names":["React","homepageToolbarDocs","useUpdatePreviewRef","useUpdateToolbarDocs","Layout","SliceZone","Homepage","doc","menu","lang","preview","data","id","activeRef","alternate_languages","isActive","body"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,mBAAT,QAAoC,6BAApC;AACA,OAAOC,mBAAP,MAAgC,iCAAhC;AACA,OAAOC,oBAAP,MAAiC,kCAAjC;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,YAAlC;AAEA;AACA;AACA;;AACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAkC;AAAA;;AAAA,MAA/BC,GAA+B,QAA/BA,GAA+B;AAAA,MAA1BC,IAA0B,QAA1BA,IAA0B;AAAA,MAApBC,IAAoB,QAApBA,IAAoB;AAAA,MAAdC,OAAc,QAAdA,OAAc;;AAEjD,MAAIH,GAAG,IAAIA,GAAG,CAACI,IAAf,EAAqB;AAEnBT,IAAAA,mBAAmB,CAACQ,OAAD,EAAUH,GAAG,CAACK,EAAd,CAAnB;AACAT,IAAAA,oBAAoB,CAACF,mBAAmB,CAACS,OAAO,CAACG,SAAT,EAAoBN,GAAG,CAACE,IAAxB,CAApB,EAAmD,CAACF,GAAD,CAAnD,CAApB;AAEA,WACE,MAAC,MAAD;AACE,MAAA,QAAQ,EAAEA,GAAG,CAACO,mBADhB;AAEE,MAAA,IAAI,EAAEL,IAFR;AAGE,MAAA,IAAI,EAAED,IAHR;AAIE,MAAA,SAAS,EAAEE,OAAO,CAACK,QAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAME,MAAC,SAAD;AAAW,MAAA,SAAS,EAAER,GAAG,CAACI,IAAJ,CAASK,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,CADF;AAUD;AACF,CAlBD;;GAAMV,Q;UAIFJ,mB,EACAC,oB;;;KALEG,Q;;AAsDN,eAAeA,QAAf","sourcesContent":["import React from 'react';\nimport { Client, manageLocal } from 'utils/prismicHelpers';\nimport { homepageToolbarDocs } from 'utils/prismicToolbarQueries'\nimport useUpdatePreviewRef from 'utils/hooks/useUpdatePreviewRef';\nimport useUpdateToolbarDocs from 'utils/hooks/useUpdateToolbarDocs';\nimport { Layout, SliceZone } from 'components'\n\n/**\n * Homepage component\n */\nconst Homepage = ({ doc, menu, lang, preview }) => {\n\n  if (doc && doc.data) {\n\n    useUpdatePreviewRef(preview, doc.id)\n    useUpdateToolbarDocs(homepageToolbarDocs(preview.activeRef, doc.lang), [doc])\n    \n    return (\n      <Layout\n        altLangs={doc.alternate_languages}\n        lang={lang}\n        menu={menu}\n        isPreview={preview.isActive}\n      >\n        <SliceZone sliceZone={doc.data.body} />\n      </Layout>\n    );\n  } \n};\n\nexport async function getStaticProps({\n  preview, \n  previewData,\n  locale,\n  locales,\n}) {\n  const ref = previewData ? previewData.ref : null\n  const isPreview = preview || false\n  const client = Client();\n  const doc =\n    (await client.getSingle('homepage', ref ? { ref, lang: locale } : { lang: locale })) ||\n    {};\n  const menu =\n    (await client.getSingle('top_menu', ref ? { ref, lang: locale } : { lang: locale })) ||\n    {};\n\n  const { currentLang, isMyMainLanguage} = manageLocal(locales, locale)\n\n  return {\n    props: {\n      menu,\n      doc,\n      preview: {\n        isActive: isPreview,\n        activeRef: ref,\n      },\n      lang:{\n        currentLang,\n        isMyMainLanguage,\n      }\n    },\n  };\n}\n\nexport default Homepage;\n"]},"metadata":{},"sourceType":"module"}