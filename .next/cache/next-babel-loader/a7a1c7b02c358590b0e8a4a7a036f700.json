{"ast":null,"code":"var _jsxFileName = \"/Users/frederico/Documents/maxclean/pages/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Client, manageLocal } from 'utils/prismicHelpers';\nimport { homepageToolbarDocs } from 'utils/prismicToolbarQueries';\nimport useUpdatePreviewRef from 'utils/hooks/useUpdatePreviewRef';\nimport useUpdateToolbarDocs from 'utils/hooks/useUpdateToolbarDocs';\nimport { Layout, SliceZone } from 'components';\n/**\n * Homepage component\n */\n\nconst Homepage = ({\n  doc,\n  menu,\n  lang,\n  preview\n}) => {\n  if (doc && doc.data) {\n    useUpdatePreviewRef(preview, doc.id);\n    useUpdateToolbarDocs(homepageToolbarDocs(preview.activeRef, doc.lang), [doc]);\n    return __jsx(Layout, {\n      altLangs: doc.alternate_languages,\n      lang: lang,\n      menu: menu,\n      isPreview: preview.isActive,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 7\n      }\n    }, __jsx(SliceZone, {\n      sliceZone: doc.data.body,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }\n    }));\n  }\n};\n\nexport async function getStaticProps({\n  preview,\n  previewData,\n  locale,\n  locales\n}) {\n  const ref = previewData ? previewData.ref : null;\n  const isPreview = preview || false;\n  const client = Client();\n  const doc = (await client.getSingle('homepage', ref ? {\n    ref,\n    lang: locale\n  } : {\n    lang: locale\n  })) || {};\n  const menu = (await client.getSingle('top_menu', ref ? {\n    ref,\n    lang: locale\n  } : {\n    lang: locale\n  })) || {};\n  const {\n    currentLang,\n    isMyMainLanguage\n  } = manageLocal(locales, locale);\n  return {\n    props: {\n      menu,\n      doc,\n      preview: {\n        isActive: isPreview,\n        activeRef: ref\n      },\n      lang: {\n        currentLang,\n        isMyMainLanguage\n      }\n    }\n  };\n}\nexport default Homepage;","map":{"version":3,"sources":["/Users/frederico/Documents/maxclean/pages/index.js"],"names":["React","Client","manageLocal","homepageToolbarDocs","useUpdatePreviewRef","useUpdateToolbarDocs","Layout","SliceZone","Homepage","doc","menu","lang","preview","data","id","activeRef","alternate_languages","isActive","body","getStaticProps","previewData","locale","locales","ref","isPreview","client","getSingle","currentLang","isMyMainLanguage","props"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,WAAjB,QAAoC,sBAApC;AACA,SAASC,mBAAT,QAAoC,6BAApC;AACA,OAAOC,mBAAP,MAAgC,iCAAhC;AACA,OAAOC,oBAAP,MAAiC,kCAAjC;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,YAAlC;AAEA;AACA;AACA;;AACA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,GAAF;AAAOC,EAAAA,IAAP;AAAaC,EAAAA,IAAb;AAAmBC,EAAAA;AAAnB,CAAD,KAAkC;AAEjD,MAAIH,GAAG,IAAIA,GAAG,CAACI,IAAf,EAAqB;AAEnBT,IAAAA,mBAAmB,CAACQ,OAAD,EAAUH,GAAG,CAACK,EAAd,CAAnB;AACAT,IAAAA,oBAAoB,CAACF,mBAAmB,CAACS,OAAO,CAACG,SAAT,EAAoBN,GAAG,CAACE,IAAxB,CAApB,EAAmD,CAACF,GAAD,CAAnD,CAApB;AAEA,WACE,MAAC,MAAD;AACE,MAAA,QAAQ,EAAEA,GAAG,CAACO,mBADhB;AAEE,MAAA,IAAI,EAAEL,IAFR;AAGE,MAAA,IAAI,EAAED,IAHR;AAIE,MAAA,SAAS,EAAEE,OAAO,CAACK,QAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAME,MAAC,SAAD;AAAW,MAAA,SAAS,EAAER,GAAG,CAACI,IAAJ,CAASK,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,CADF;AAUD;AACF,CAlBD;;AAoBA,OAAO,eAAeC,cAAf,CAA8B;AACnCP,EAAAA,OADmC;AAEnCQ,EAAAA,WAFmC;AAGnCC,EAAAA,MAHmC;AAInCC,EAAAA;AAJmC,CAA9B,EAKJ;AACD,QAAMC,GAAG,GAAGH,WAAW,GAAGA,WAAW,CAACG,GAAf,GAAqB,IAA5C;AACA,QAAMC,SAAS,GAAGZ,OAAO,IAAI,KAA7B;AACA,QAAMa,MAAM,GAAGxB,MAAM,EAArB;AACA,QAAMQ,GAAG,GACP,CAAC,MAAMgB,MAAM,CAACC,SAAP,CAAiB,UAAjB,EAA6BH,GAAG,GAAG;AAAEA,IAAAA,GAAF;AAAOZ,IAAAA,IAAI,EAAEU;AAAb,GAAH,GAA2B;AAAEV,IAAAA,IAAI,EAAEU;AAAR,GAA3D,CAAP,KACA,EAFF;AAGA,QAAMX,IAAI,GACR,CAAC,MAAMe,MAAM,CAACC,SAAP,CAAiB,UAAjB,EAA6BH,GAAG,GAAG;AAAEA,IAAAA,GAAF;AAAOZ,IAAAA,IAAI,EAAEU;AAAb,GAAH,GAA2B;AAAEV,IAAAA,IAAI,EAAEU;AAAR,GAA3D,CAAP,KACA,EAFF;AAIA,QAAM;AAAEM,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAmC1B,WAAW,CAACoB,OAAD,EAAUD,MAAV,CAApD;AAEA,SAAO;AACLQ,IAAAA,KAAK,EAAE;AACLnB,MAAAA,IADK;AAELD,MAAAA,GAFK;AAGLG,MAAAA,OAAO,EAAE;AACPK,QAAAA,QAAQ,EAAEO,SADH;AAEPT,QAAAA,SAAS,EAAEQ;AAFJ,OAHJ;AAOLZ,MAAAA,IAAI,EAAC;AACHgB,QAAAA,WADG;AAEHC,QAAAA;AAFG;AAPA;AADF,GAAP;AAcD;AAED,eAAepB,QAAf","sourcesContent":["import React from 'react';\nimport { Client, manageLocal } from 'utils/prismicHelpers';\nimport { homepageToolbarDocs } from 'utils/prismicToolbarQueries'\nimport useUpdatePreviewRef from 'utils/hooks/useUpdatePreviewRef';\nimport useUpdateToolbarDocs from 'utils/hooks/useUpdateToolbarDocs';\nimport { Layout, SliceZone } from 'components'\n\n/**\n * Homepage component\n */\nconst Homepage = ({ doc, menu, lang, preview }) => {\n\n  if (doc && doc.data) {\n\n    useUpdatePreviewRef(preview, doc.id)\n    useUpdateToolbarDocs(homepageToolbarDocs(preview.activeRef, doc.lang), [doc])\n    \n    return (\n      <Layout\n        altLangs={doc.alternate_languages}\n        lang={lang}\n        menu={menu}\n        isPreview={preview.isActive}\n      >\n        <SliceZone sliceZone={doc.data.body} />\n      </Layout>\n    );\n  } \n};\n\nexport async function getStaticProps({\n  preview, \n  previewData,\n  locale,\n  locales,\n}) {\n  const ref = previewData ? previewData.ref : null\n  const isPreview = preview || false\n  const client = Client();\n  const doc =\n    (await client.getSingle('homepage', ref ? { ref, lang: locale } : { lang: locale })) ||\n    {};\n  const menu =\n    (await client.getSingle('top_menu', ref ? { ref, lang: locale } : { lang: locale })) ||\n    {};\n\n  const { currentLang, isMyMainLanguage} = manageLocal(locales, locale)\n\n  return {\n    props: {\n      menu,\n      doc,\n      preview: {\n        isActive: isPreview,\n        activeRef: ref,\n      },\n      lang:{\n        currentLang,\n        isMyMainLanguage,\n      }\n    },\n  };\n}\n\nexport default Homepage;\n"]},"metadata":{},"sourceType":"module"}