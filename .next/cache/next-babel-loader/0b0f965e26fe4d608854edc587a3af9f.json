{"ast":null,"code":"var _jsxFileName = \"/Users/frederico/nextjs/maxclean/components/SlideInText/SlideInText.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRef, useEffect } from \"react\";\nimport gsap from \"gsap\";\n\nconst splitText = text => __jsx(\"span\", {\n  \"aria-label\": text,\n  role: \"heading\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 2\n  }\n}, text.split(\"\").map(function (char, index) {\n  return __jsx(\"span\", {\n    \"aria-hidden\": \"true\",\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 5\n    }\n  }, char);\n}));\n\nconst SlideInText = ({\n  text\n}) => {\n  const textRef = useRef();\n  useEffect(() => {\n    splitting({\n      target: textRef.current\n    });\n    gsap.from(textRef.current.childNodes, {\n      yPercent: 120,\n      stagger: 0.2,\n      duration: 1,\n      ease: \"back\"\n    });\n  }, [textRef]);\n  return __jsx(\"div\", {\n    ref: textRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, splitText(text));\n};\n\nexport default SlideInText;","map":{"version":3,"sources":["/Users/frederico/nextjs/maxclean/components/SlideInText/SlideInText.js"],"names":["useRef","useEffect","gsap","splitText","text","split","map","char","index","SlideInText","textRef","splitting","target","current","from","childNodes","yPercent","stagger","duration","ease"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AAEA,MAAMC,SAAS,GAAIC,IAAD,IACjB;AAAM,gBAAYA,IAAlB;AAAwB,EAAA,IAAI,EAAC,SAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACEA,IAAI,CAACC,KAAL,CAAW,EAAX,EAAeC,GAAf,CAAmB,UAAUC,IAAV,EAAgBC,KAAhB,EAAuB;AAC1C,SACC;AAAM,mBAAY,MAAlB;AAAyB,IAAA,GAAG,EAAEA,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACED,IADF,CADD;AAKA,CANA,CADF,CADD;;AAYA,MAAME,WAAW,GAAG,CAAC;AAAEL,EAAAA;AAAF,CAAD,KAAc;AACjC,QAAMM,OAAO,GAAGV,MAAM,EAAtB;AACAC,EAAAA,SAAS,CAAC,MAAM;AACfU,IAAAA,SAAS,CAAC;AAAEC,MAAAA,MAAM,EAAEF,OAAO,CAACG;AAAlB,KAAD,CAAT;AACAX,IAAAA,IAAI,CAACY,IAAL,CAAUJ,OAAO,CAACG,OAAR,CAAgBE,UAA1B,EAAsC;AACrCC,MAAAA,QAAQ,EAAE,GAD2B;AAErCC,MAAAA,OAAO,EAAE,GAF4B;AAGrCC,MAAAA,QAAQ,EAAE,CAH2B;AAIrCC,MAAAA,IAAI,EAAE;AAJ+B,KAAtC;AAMA,GARQ,EAQN,CAACT,OAAD,CARM,CAAT;AASA,SAAO;AAAK,IAAA,GAAG,EAAEA,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoBP,SAAS,CAACC,IAAD,CAA7B,CAAP;AACA,CAZD;;AAcA,eAAeK,WAAf","sourcesContent":["import { useRef, useEffect } from \"react\";\nimport gsap from \"gsap\";\n\nconst splitText = (text) => (\n\t<span aria-label={text} role=\"heading\">\n\t\t{text.split(\"\").map(function (char, index) {\n\t\t\treturn (\n\t\t\t\t<span aria-hidden=\"true\" key={index}>\n\t\t\t\t\t{char}\n\t\t\t\t</span>\n\t\t\t);\n\t\t})}\n\t</span>\n);\n\nconst SlideInText = ({ text }) => {\n\tconst textRef = useRef();\n\tuseEffect(() => {\n\t\tsplitting({ target: textRef.current });\n\t\tgsap.from(textRef.current.childNodes, {\n\t\t\tyPercent: 120,\n\t\t\tstagger: 0.2,\n\t\t\tduration: 1,\n\t\t\tease: \"back\",\n\t\t});\n\t}, [textRef]);\n\treturn <div ref={textRef}>{splitText(text)}</div>;\n};\n\nexport default SlideInText;\n"]},"metadata":{},"sourceType":"module"}