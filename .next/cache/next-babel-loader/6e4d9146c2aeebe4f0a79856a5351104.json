{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/frederico/nextjs/maxclean/pages/[uid].js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { pageToolbarDocs } from \"utils/prismicToolbarQueries\";\nimport useUpdatePreviewRef from \"utils/hooks/useUpdatePreviewRef\";\nimport useUpdateToolbarDocs from \"utils/hooks/useUpdateToolbarDocs\";\nimport { Layout, SliceZone } from \"components\";\n/**\n * posts component\n */\n\nvar Page = function Page(_ref) {\n  _s();\n\n  var doc = _ref.doc,\n      menu = _ref.menu,\n      lang = _ref.lang,\n      preview = _ref.preview;\n\n  if (doc && doc.data) {\n    useUpdatePreviewRef(preview, doc.id);\n    useUpdateToolbarDocs(pageToolbarDocs(doc.uid, preview.activeRef, doc.lang), [doc]);\n    return __jsx(Layout, {\n      altLangs: doc.alternate_languages,\n      lang: lang,\n      menu: menu,\n      isPreview: preview.isActive,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 4\n      }\n    }, __jsx(SliceZone, {\n      sliceZone: doc.data.body,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 5\n      }\n    }));\n  }\n};\n\n_s(Page, \"WVAZUbuukr7PwlfasY2BCDrp+uQ=\", false, function () {\n  return [useUpdatePreviewRef, useUpdateToolbarDocs];\n});\n\n_c = Page;\nexport var __N_SSG = true;\nexport default Page;\n\nvar _c;\n\n$RefreshReg$(_c, \"Page\");","map":{"version":3,"sources":["/Users/frederico/nextjs/maxclean/pages/[uid].js"],"names":["React","pageToolbarDocs","useUpdatePreviewRef","useUpdateToolbarDocs","Layout","SliceZone","Page","doc","menu","lang","preview","data","id","uid","activeRef","alternate_languages","isActive","body"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,SAASC,eAAT,QAAgC,6BAAhC;AACA,OAAOC,mBAAP,MAAgC,iCAAhC;AACA,OAAOC,oBAAP,MAAiC,kCAAjC;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,YAAlC;AAEA;AACA;AACA;;AACA,IAAMC,IAAI,GAAG,SAAPA,IAAO,OAAkC;AAAA;;AAAA,MAA/BC,GAA+B,QAA/BA,GAA+B;AAAA,MAA1BC,IAA0B,QAA1BA,IAA0B;AAAA,MAApBC,IAAoB,QAApBA,IAAoB;AAAA,MAAdC,OAAc,QAAdA,OAAc;;AAC9C,MAAIH,GAAG,IAAIA,GAAG,CAACI,IAAf,EAAqB;AACpBT,IAAAA,mBAAmB,CAACQ,OAAD,EAAUH,GAAG,CAACK,EAAd,CAAnB;AACAT,IAAAA,oBAAoB,CACnBF,eAAe,CAACM,GAAG,CAACM,GAAL,EAAUH,OAAO,CAACI,SAAlB,EAA6BP,GAAG,CAACE,IAAjC,CADI,EAEnB,CAACF,GAAD,CAFmB,CAApB;AAKA,WACC,MAAC,MAAD;AACC,MAAA,QAAQ,EAAEA,GAAG,CAACQ,mBADf;AAEC,MAAA,IAAI,EAAEN,IAFP;AAGC,MAAA,IAAI,EAAED,IAHP;AAIC,MAAA,SAAS,EAAEE,OAAO,CAACM,QAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMC,MAAC,SAAD;AAAW,MAAA,SAAS,EAAET,GAAG,CAACI,IAAJ,CAASM,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAND,CADD;AAUA;AACD,CAnBD;;GAAMX,I;UAEJJ,mB,EACAC,oB;;;KAHIG,I;;AAyEN,eAAeA,IAAf","sourcesContent":["import React from \"react\";\nimport { queryRepeatableDocuments } from \"utils/queries\";\nimport { Client, manageLocal } from \"utils/prismicHelpers\";\nimport { pageToolbarDocs } from \"utils/prismicToolbarQueries\";\nimport useUpdatePreviewRef from \"utils/hooks/useUpdatePreviewRef\";\nimport useUpdateToolbarDocs from \"utils/hooks/useUpdateToolbarDocs\";\nimport { Layout, SliceZone } from \"components\";\n\n/**\n * posts component\n */\nconst Page = ({ doc, menu, lang, preview }) => {\n\tif (doc && doc.data) {\n\t\tuseUpdatePreviewRef(preview, doc.id);\n\t\tuseUpdateToolbarDocs(\n\t\t\tpageToolbarDocs(doc.uid, preview.activeRef, doc.lang),\n\t\t\t[doc]\n\t\t);\n\n\t\treturn (\n\t\t\t<Layout\n\t\t\t\taltLangs={doc.alternate_languages}\n\t\t\t\tlang={lang}\n\t\t\t\tmenu={menu}\n\t\t\t\tisPreview={preview.isActive}\n\t\t\t>\n\t\t\t\t<SliceZone sliceZone={doc.data.body} />\n\t\t\t</Layout>\n\t\t);\n\t}\n};\n\nexport async function getStaticProps({\n\tpreview,\n\tpreviewData,\n\tparams,\n\tlocale,\n\tlocales,\n}) {\n\tconst ref = previewData ? previewData.ref : null;\n\tconst isPreview = preview || false;\n\tconst client = Client();\n\tconst doc =\n\t\t(await client.getByUID(\n\t\t\t\"page\",\n\t\t\tparams.uid,\n\t\t\tref ? { ref, lang: locale } : { lang: locale }\n\t\t)) || {};\n\tconst menu =\n\t\t(await client.getSingle(\n\t\t\t\"top_menu\",\n\t\t\tref ? { ref, lang: locale } : { lang: locale }\n\t\t)) || {};\n\n\tconst { currentLang, isMyMainLanguage } = manageLocal(locales, locale);\n\n\treturn {\n\t\tprops: {\n\t\t\tmenu,\n\t\t\tdoc,\n\t\t\tpreview: {\n\t\t\t\tisActive: isPreview,\n\t\t\t\tactiveRef: ref,\n\t\t\t},\n\t\t\tlang: {\n\t\t\t\tcurrentLang,\n\t\t\t\tisMyMainLanguage,\n\t\t\t},\n\t\t},\n\t};\n}\n\nexport async function getStaticPaths() {\n\tconst documents = await queryRepeatableDocuments(\n\t\t(doc) => doc.type === \"page\"\n\t);\n\treturn {\n\t\tpaths: documents.map((doc) => {\n\t\t\treturn { params: { uid: doc.uid }, locale: doc.lang };\n\t\t}),\n\t\tfallback: false,\n\t};\n}\n\nexport default Page;\n"]},"metadata":{},"sourceType":"module"}