{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/frederico/Documents/maxclean/utils/prismicHelpers.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Prismic from 'prismic-javascript';\nimport Link from 'next/link';\nimport { apiEndpoint, accessToken, hrefResolver } from 'prismic-configuration'; // Helper function to get the Prismic repository name from the URL\n\nvar _apiEndpoint$match = apiEndpoint.match(/https?:\\/\\/([^.]+)?\\.(cdn\\.)?.+/),\n    _apiEndpoint$match2 = _slicedToArray(_apiEndpoint$match, 2),\n    prismicRepoName = _apiEndpoint$match2[1]; // Helper function to convert Prismic Rich Text links to Next/Link components\n\n\nexport { prismicRepoName };\nexport var customLink = function customLink(type, element, content) {\n  return __jsx(Link, {\n    key: element.data.id,\n    href: hrefResolver(element.data),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 3\n    }\n  }, __jsx(\"a\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, content));\n}; // Client method to query documents from the Prismic repo\n\nexport var Client = function Client() {\n  var req = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  return Prismic.client(apiEndpoint, createClientOptions(req, accessToken));\n};\n_c = Client;\n\nvar createClientOptions = function createClientOptions() {\n  var req = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var prismicAccessToken = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var reqOption = req ? {\n    req: req\n  } : {};\n  var accessTokenOption = prismicAccessToken ? {\n    accessToken: prismicAccessToken\n  } : {};\n  return _objectSpread(_objectSpread({}, reqOption), accessTokenOption);\n};\n\nexport var manageLocal = function manageLocal(Locales, locale) {\n  // Languages from API response\n  // // Setting Master language as default language option\n  var mainLanguage = Locales[0]; // // Sets current language based on the locale\n\n  var currentLang = locale !== undefined ? locale : mainLanguage;\n  var isMyMainLanguage = mainLanguage === currentLang;\n  return {\n    mainLanguage: mainLanguage,\n    currentLang: currentLang,\n    isMyMainLanguage: isMyMainLanguage\n  };\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Client\");","map":{"version":3,"sources":["/Users/frederico/Documents/maxclean/utils/prismicHelpers.js"],"names":["Prismic","Link","apiEndpoint","accessToken","hrefResolver","match","prismicRepoName","customLink","type","element","content","data","id","Client","req","client","createClientOptions","prismicAccessToken","reqOption","accessTokenOption","manageLocal","Locales","locale","mainLanguage","currentLang","undefined","isMyMainLanguage"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,OAAP,MAAoB,oBAApB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SACEC,WADF,EAEEC,WAFF,EAGEC,YAHF,QAIO,uBAJP,C,CAMA;;yBACmCF,WAAW,CAACG,KAAZ,CAAkB,iCAAlB,C;;IAAnBC,e,2BAEhB;;;;AACA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAOC,OAAP,EAAgBC,OAAhB;AAAA,SACxB,MAAC,IAAD;AACE,IAAA,GAAG,EAAED,OAAO,CAACE,IAAR,CAAaC,EADpB;AAEE,IAAA,IAAI,EAAER,YAAY,CAACK,OAAO,CAACE,IAAT,CAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAID,OAAJ,CAJF,CADwB;AAAA,CAAnB,C,CASP;;AAEA,OAAO,IAAMG,MAAM,GAAG,SAATA,MAAS;AAAA,MAACC,GAAD,uEAAO,IAAP;AAAA,SACpBd,OAAO,CAACe,MAAR,CAAeb,WAAf,EAA4Bc,mBAAmB,CAACF,GAAD,EAAMX,WAAN,CAA/C,CADoB;AAAA,CAAf;KAAMU,M;;AAGb,IAAMG,mBAAmB,GAAG,SAAtBA,mBAAsB,GAA2C;AAAA,MAA1CF,GAA0C,uEAApC,IAAoC;AAAA,MAA9BG,kBAA8B,uEAAT,IAAS;AACrE,MAAMC,SAAS,GAAGJ,GAAG,GAAG;AAAEA,IAAAA,GAAG,EAAHA;AAAF,GAAH,GAAa,EAAlC;AACA,MAAMK,iBAAiB,GAAGF,kBAAkB,GACxC;AAAEd,IAAAA,WAAW,EAAEc;AAAf,GADwC,GAExC,EAFJ;AAGA,yCACKC,SADL,GAEKC,iBAFL;AAID,CATD;;AAYA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,OAAD,EAAUC,MAAV,EAAqB;AAC9C;AACF;AACA,MAAMC,YAAY,GAAGF,OAAO,CAAC,CAAD,CAA5B,CAHgD,CAIhD;;AACA,MAAMG,WAAW,GAAGF,MAAM,KAAKG,SAAX,GAAuBH,MAAvB,GAAgCC,YAApD;AACA,MAAMG,gBAAgB,GAAGH,YAAY,KAAKC,WAA1C;AAEA,SAAO;AAAED,IAAAA,YAAY,EAAZA,YAAF;AAAgBC,IAAAA,WAAW,EAAXA,WAAhB;AAA6BE,IAAAA,gBAAgB,EAAhBA;AAA7B,GAAP;AACC,CATM","sourcesContent":["import Prismic from 'prismic-javascript';\nimport Link from 'next/link';\nimport {\n  apiEndpoint,\n  accessToken,\n  hrefResolver,\n} from 'prismic-configuration';\n\n// Helper function to get the Prismic repository name from the URL\nexport const [, prismicRepoName] = apiEndpoint.match(/https?:\\/\\/([^.]+)?\\.(cdn\\.)?.+/);\n\n// Helper function to convert Prismic Rich Text links to Next/Link components\nexport const customLink = (type, element, content) => (\n  <Link\n    key={element.data.id}\n    href={hrefResolver(element.data)}\n  >\n    <a>{content}</a>\n  </Link>\n);\n\n// Client method to query documents from the Prismic repo\n\nexport const Client = (req = null) =>\n  Prismic.client(apiEndpoint, createClientOptions(req, accessToken));\n\nconst createClientOptions = (req = null, prismicAccessToken = null) => {\n  const reqOption = req ? { req } : {};\n  const accessTokenOption = prismicAccessToken\n    ? { accessToken: prismicAccessToken }\n    : {};\n  return {\n    ...reqOption,\n    ...accessTokenOption,\n  };\n};\n\n\nexport const manageLocal = (Locales, locale) => {\n  // Languages from API response\n// // Setting Master language as default language option\nconst mainLanguage = Locales[0];\n// // Sets current language based on the locale\nconst currentLang = locale !== undefined ? locale : mainLanguage;\nconst isMyMainLanguage = mainLanguage === currentLang;\n\nreturn { mainLanguage, currentLang, isMyMainLanguage }\n}\n"]},"metadata":{},"sourceType":"module"}